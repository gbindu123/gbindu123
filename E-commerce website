Creating URLs – 
In ecom> urls.py add the following lines. This file handles main project URLs. But we don’t want to disturb it, so we will do our work in frontend > URLs.py. And for that we need to include frontend > URLs inside the ecom> URLs. 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('frontend.urls')),
]
Creating Models – 
Add a product model here.
 

class Product(models.Model):
    productname = models.CharField(max_length=200)
    price = models.DecimalField(max_digits=5, decimal_places=2)
    description = models.TextField()
    image = models.CharField(max_length=5000, null=True, blank=True)
    Register Models into admin – 
Just after creating model, we should register that form into admin.py.
 

from django.contrib import admin
from .models import *


admin.site.register(Product)
Creating Views for Displaying Products – 
In frontend > views.py we write a function to get and display products from our database. 

from django.shortcuts import render
from .models import *

def products(request):
    productss = Product.objects.all()
    return render(request, 'products.html', {'productss':productss})
Creating Url for products – 
 Here we will set dynamic URL which can be useful to display our products. In frontend > urls.py

from django.urls import path
from . import views

urlpatterns = [

    path('products/', views.products, name='products'),

]
Creating Template – 
Creating template depends upon how you want to display products on website. For displaying products we have shared a simple code. Add it in frontend > templates > products.html

{% for product in productss %}
<div class="card" style="width: 18rem;">
  <img class="card-img-top" src="{{ product.image }}" alt="Card image cap">
  <div class="card-body">
    <h5 class="card-title">{{ product.productname }}</h5>
    <p class="card-text">{{ product.description }}</p>
    <p class="card-text">Price - {{ product.price }}</p>
    <a href="#" class="btn btn-primary">Buy Now</a>
  </div>
</div>
{% endfor %}
Creating Superuser – 
Now, create Django superuser for handling admin stuff. Type following command in terminal
 

django-admin createsuperuser
Then it will ask for username, email and password. 

Run the app 
After creating superuser, in terminal type,

python manage.py runserver
  to start the server and go to admin panel (http://localhost:8000/admin) and add some products to the database.
